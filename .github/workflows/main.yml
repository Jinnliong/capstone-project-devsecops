name: 'DevSecOps CI/CD Pipeline'

on:
  push:
    branches: [ "dev-snky" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform-Validate-Plan'
    runs-on: ubuntu-latest
    #needs: [build, dependency-scan, unit-tests] # Ensure previous jobs succeed
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.6
    
    - name: Install Snyk 
      run: npm install -g snyk  # Install Snyk globally

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
      run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Run Snyk dependency scan (pre-deployment)
      run: |
        snyk test --paths terraform/* # Scan only Terraform directory
        if [ $? -ne 0 ]; then
          echo "Found vulnerabilities in Terraform dependencies! Please fix them before deploying."
         exit 1
        fi

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      if: github.event_name == 'pull_request'
      continue-on-error: true

    #- uses: actions/github-script@v6
      #if: github.event_name == 'pull_request'
      #env:
        #PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        #with:
          #github-token: ${{ secrets.GITHUB_TOKEN }}
          #script: |
            #const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #<details><summary>Validation Output</summary>

            #\`\`\`\n
            #${{ steps.validate.outputs.stdout }}
            #\`\`\`

            #</details>

            #### Terraform Plan \`${{ steps.plan.outcome }}\`

            #<details><summary>Show Plan</summary>

            #\`\`\`\n
            #${process.env.PLAN}
            #\`\`\`

            #</details>

            #*Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            #github.rest.issues.createComment({
              #issue_number: context.issue.number,
              #owner: context.repo.owner,
              #repo: context.repo.repo,
              #body: output
            #})

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1